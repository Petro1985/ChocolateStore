@using Models
@using ChocolateUI.Services
@using ChocolateUI.Pages.Components
@inject IFetchService FetchService
@inject ILogger<AddOrEditProductModal> Logger

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактирование или создание продукта</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModalForm">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-floating">
                    <input id="ProductNameInput" class="form-control" type="text" @bind="CurrentProduct.Name" placeholder="Product name"/>
                    <label for="ProductNameInput">Имя Продукта</label>
                </div>

                <div class="form-floating mt-2">
                    <textarea id="DescriptionInput" class="form-control" type="text" @bind="CurrentProduct.Description" placeholder="Description" style="height: 12rem"></textarea>
                    <label for="DescriptionInput">Описание</label>
                </div>

                <div class="form-floating mt-2">
                    <div class="input-group" id="PriceRubInput">
                        <input class="form-control" type="number" @bind="CurrentProduct.Price" placeholder="Price"/>
                        <div class="input-group-text">руб.</div>
                    </div>
                    <label for="PriceRubInput"></label>
                </div>

                <div class="form-floating mt-2">
                    <input id="TimeToMakeInHoursInput" class="form-control" type="number" @bind="CurrentProduct.TimeToMakeInHours" placeholder="TimeToMake"/>
                    <label for="TimeToMakeInHoursInput">Требуемое на производство время</label>
                </div>

                <div class="form-floating mt-2">
                    <input id="CategoryNameInput" class="form-control" type="text" readonly value="@Category?.Name"/>
                    <label for="CategoryNameInput">Категория</label>
                </div>
            </div>
            <ChoosePhoto @ref="_choosePhoto" IsMultiple="false"></ChoosePhoto>
            <div class="modal-footer">
                <button 
                    type="button"
                    class="btn btn-primary" 
                    @onclick="@(CurrentProduct.Id == default? async () => await CreateProduct() : async () => await EditProduct())">
                    @(CurrentProduct.Id == default? "Создать" : "Сохранить")
                </button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalForm">Отмена</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public CategoryResponse? Category { get; set; }

    [Parameter]
    public Func<ProductResponse, Task>? AddProductFunc {get; set; } 
    [Parameter]
    public Func<ProductResponse, Task>? UpdateProductFunc {get; set; } 

    private ChoosePhoto? _choosePhoto;
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public ProductResponse CurrentProduct { get; set; }

    protected override void OnInitialized()
    {
        CurrentProduct = new ProductResponse();
        Category = new CategoryResponse();
    }

    public void Open(ProductResponse product)
    {
        CurrentProduct = product;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        if (product.MainPhotoId != default)
        {
            _choosePhoto.OldPhotoPath = FetchService.MakeImageUrl(product.MainPhotoId);
        } else
        {
            _choosePhoto.OldPhotoPath = $"{FetchService.BaseUrl}images/NoImage.png";
        }
    }

    public void CloseModalForm()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
    }

    private async Task CreateProduct()
    {
        if (AddProductFunc is not null)
        {
            CurrentProduct.CategoryId = Category.Id;
            var newImage = _choosePhoto!.ChosenPhotoBase64;
            if (!string.IsNullOrWhiteSpace(newImage))
            {
                Logger.LogInformation("Фотография продукта сохранена");
                CurrentProduct.MainPhotoId = await FetchService.AddProductPhoto(newImage, CurrentProduct.Id);
            }
            await AddProductFunc(CurrentProduct);
        }
        else
        {
            Logger.LogWarning("В компонент {ComponentName} не передан параметр {ParameterName}", nameof(AddOrEditProductModal), nameof(AddProductFunc));
        }
        _choosePhoto.ClearImage();
        CloseModalForm();
    }

    private async Task EditProduct()
    {
        Logger.LogInformation("Идет сохранение изменений по продукту");
        if (UpdateProductFunc is not null)
        {
            var newImage = _choosePhoto!.ChosenPhotoBase64;
            if (!string.IsNullOrWhiteSpace(newImage))
            {
                Logger.LogInformation("Фотография продукта сохранена");
                CurrentProduct.MainPhotoId = await FetchService.AddProductPhoto(newImage, CurrentProduct.Id);
            }
            await UpdateProductFunc(CurrentProduct);
            _choosePhoto. ClearImage();
            CloseModalForm();
        }
        else
        {
            Logger.LogWarning("В компонент {ComponentName} не передан параметр {ParameterName}", nameof(AddOrEditProductModal), nameof(UpdateProductFunc));
        }
    }

}