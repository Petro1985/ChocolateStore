@page "/Category/{CategoryId:guid}"
@using ChocolateUI.Services
@using Microsoft.AspNetCore.Components
@inject ILogger<Products> Logger
@inject IFetchService FetchService
@inject IUserProfile UserProfile

@if (_products is null || _category is null)
{
    <h3>Загрузка продуктов...</h3>
}
else
{
    <h3 class="mb-5">Продукты категории: @_category.Name</h3>
    <div class="row mt-3">
        <DisplayProducts Products="@_products" DeleteProductFunc="DeleteProduct" UpdateProductFunc="UpdateProduct"></DisplayProducts>
    </div>

    @if (UserProfile.IsLoggedIn() && UserProfile.IsAdmin())
    {
        <div class="row mt-3">
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                <a
                    @onclick="() => { _addOrEditProductForm.Open(new ProductResponse());}" style="cursor:pointer;">
                    <div class="card">
                        <img class="img-thumbnail" src="images/add_new_item.png" alt="AddNewItem"/>
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                Добавить новый товар
                            </h5>
                        </div>
                    </div>
                </a>
            </div>
        </div>
        <AddOrEditProductModal @ref="_addOrEditProductForm" Category="_category" AddProductFunc="AddProduct"></AddOrEditProductModal>
    }
}

@code
{
    [Parameter] public Guid CategoryId { get; set; }

    private AddOrEditProductModal? _addOrEditProductForm;

    private Dictionary<Guid, ProductResponse>? _products;
    private CategoryResponse? _category;

    protected override async Task OnInitializedAsync()
    {
        await ReLoadProducts();
        _category = await FetchService.GetCategory(CategoryId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_category?.Id != CategoryId)
        {
            await ReLoadProducts();
            _category = await FetchService.GetCategory(CategoryId);
            StateHasChanged();
        }
    }

    private async Task AddProduct(ProductResponse newProduct)
    {
        try
        {
            await FetchService.CreateNewProduct(newProduct);
            await ReLoadProducts();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при создании продукта");
            throw;
        }
    }
    
    private async Task UpdateProduct(ProductResponse updatingProduct)
    {
        try
        {
            await FetchService.UpdateProduct(updatingProduct);
            await ReLoadProducts();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при редактировании продукта");
            throw;
        }
    }

    private async Task ReLoadProducts()
    {
        _products = (await FetchService.GetProductByCategory(CategoryId)).ToDictionary(x => x.Id);
    }

    private async Task DeleteProduct(Guid productId)
    {
        try
        {
            await FetchService.DeleteProduct(productId);
            _products!.Remove(productId);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при попытке удаления категории");
            throw;
        }
    }
}