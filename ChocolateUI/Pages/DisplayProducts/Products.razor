@page "/Category/{CategoryId:guid}"
@using Models.Product
@inherits ProductsBase
@inject ILogger<Products> Logger

@if (Products is null || Category is null)
{
    <h3>Загрузка продуктов...</h3>
}
else
{
    <h3 class="mb-5">Продукты категории: @Category.Name</h3>
    <div class="row mt-3">
        <DisplayProducts Products="@Products" DeleteProductFunc="DeleteProduct" UpdateProductFunc="UpdateProduct"></DisplayProducts>
    </div>

    @if (UserProfile.IsLoggedIn() && UserProfile.IsAdmin())
    {
        <div class="row mt-3">
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                <a
                    @onclick="() => { _addOrEditProductForm.Open(new ProductDTO());}" style="cursor:pointer;">
                    <div class="card">
                        <img class="img-thumbnail" src="https://localhost:7213/Images/add_new_item.png" alt="AddNewItem"/>
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                Добавить новый товар
                            </h5>
                        </div>
                    </div>
                </a>
            </div>
        </div>
        <AddOrEditProductModal @ref="_addOrEditProductForm" Category="Category" AddProductFunc="AddProduct"></AddOrEditProductModal>
        
    }
}

@code 
{
    private AddOrEditProductModal _addOrEditProductForm { get; set; }

    private async Task AddProduct(ProductDTO newProduct)
    {
        try
        {
            await FetchService.CreateNewProduct(newProduct);
            Products!.Add(newProduct.Id, newProduct);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private async Task UpdateProduct(ProductDTO updatingProduct)
    {
        try
        {
            await FetchService.UpdateProduct(updatingProduct);
            Products![updatingProduct.Id] = updatingProduct;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при редактировании категории");
            throw;
        }
    }
    
    private async Task DeleteProduct(Guid productId)
    {
        try
        {
            await FetchService.DeleteProduct(productId);
            Products!.Remove(productId);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при попытке удаления категории");
            throw;
        }
    }
}