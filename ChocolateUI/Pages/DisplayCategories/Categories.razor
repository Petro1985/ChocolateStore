@page "/"
@page "/index.html"
@using ChocolateUI.Services
@inherits CategoryBase
@inject IFetchService FetchService 

@if (Categories is null)
{
    <h3>Загружаются категории товаров...</h3>
}
else
{
    <h3 class="mb-5">
        <b>Каталог товаров:</b>
    </h3>

    <div class="row mt-3">
        <DisplayCategories Categories="Categories" UpdateCategory="UpdateCategory" DeleteCategory="DeleteCategory"></DisplayCategories>
    </div>

    @if (UserProfile.IsLoggedIn() && UserProfile.IsAdmin())
    {
        <div class="row mt-3">
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                <a @onclick="() => _addCategoryForm.Open(new CategoryResponse())" style="cursor:pointer;">
                    <div class="card">
                        <img class="img-thumbnail" src="@(FetchService.BaseUrl)images/add_new_item.png" alt="AddNewItem"/>
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                Добавить новую категорию
                            </h5>
                        </div>
                    </div>
                </a>
            </div>
        </div>
        <AddOrEditCategoryModal @ref="_addCategoryForm" AddCategory="CreateCategory"></AddOrEditCategoryModal>
    }
}

@code {
    private AddOrEditCategoryModal _addCategoryForm { get; set; }

    private async Task CreateCategory(CategoryResponse newCategory)
    {
        try
        {
            var id = await FetchService.CreateNewCategory(newCategory);
            newCategory.Id = id;
            Categories!.Add(newCategory.Id, newCategory);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при создании новой категории");
            throw;
        }
    }

    private async Task UpdateCategory(CategoryResponse updatingCategory)
    {
        try
        {
            await FetchService.UpdateCategory(updatingCategory);
            Categories![updatingCategory.Id] = updatingCategory;
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при редактировании категории");
            throw;
        }
    }

    private async Task DeleteCategory(Guid categoryId)
    {
        try
        {
            await FetchService.DeleteCategory(categoryId);
            Categories!.Remove(categoryId);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при попытке удаления категории");
            throw;
        }
    }

}