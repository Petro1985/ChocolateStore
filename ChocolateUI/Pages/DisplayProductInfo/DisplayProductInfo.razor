@using ChocolateUI.Pages.Components
@using Models.Photo
@using Models.Product
@using System.Globalization
@using ChocolateUI.Services
@inject IUserProfile UserProfile
@inject IFetchService FetchService

<div class="container">
    <div class="row">
        <div class="col-xl-5 col-lg-6 col-12">
            <div class="container user-select-none">
                <div class="row">
                    <div class="col-12">
                        <img alt="main-photo" class="" style="max-width:100%;height:auto;" src="@FetchService.MakeImageUrl(_currentPhoto)" draggable="false"/>
                    </div>
                </div>
                <div class="row mt-3">
                    @foreach (var photo in Photos)
                    {
                        <div class="col-3 p-2 position-relative">
                            <a class="mini-image @(_currentPhoto == photo ? "selected" : "")" @onclick="() => SetCurrentPhoto(photo)">
                                <img
                                    draggable="false"
                                    alt="miniature-photo"
                                    style="width:100%;height:auto; cursor: pointer;"
                                    src="@FetchService.MakeThumbnailUrl(photo)"/>
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="ms-4 mt-4 col-xl-4 col-lg-5 col-12 ms-xl-4 ms-lg-4 mt-xl-0 mt-lg-0 mt-md-4 mt-sm-4 ms-sm-4">
            <h3>
                <p>Описание товара:</p>
            </h3>
            <div>
                @foreach (var str in _description)
                {
                    @str <br />
                }
            </div>
            <h3 class="mt-4">
                <p>Цена: <b>@(Product.Price.ToString("N2") + " руб.")</b></p>
            </h3>
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public ProductDto Product { get; set; }

    [Parameter]
    public ICollection<Guid> Photos { get; set; }

    [Parameter]
    public Func<Guid, Task> RemovePhotoFunc { get; set; }

    private Guid _currentPhoto;
    private string[] _description { get; set; }

    protected override void OnInitialized()
    {
        _currentPhoto = Photos.FirstOrDefault();
        // Меняем переносы строк на тег <br />
        _description = Product.Description.Split('\n');
    }

    private async Task RemovePhoto(Guid photoId)
    {
        await RemovePhotoFunc(photoId);
    }

    private void SetCurrentPhoto(Guid newPhoto)
    {
        _currentPhoto = newPhoto;
        StateHasChanged();
    }
}