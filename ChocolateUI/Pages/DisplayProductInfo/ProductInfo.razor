@page "/Category/{CategoryId:guid}/Product/{ProductId:guid}"
@using ChocolateUI.Services
@using Models.Product
@inject IUserProfile UserProfile
@inject ILogger<ProductInfo> Logger
@inject IFetchService FetchService

@if (_product is null)
{
    <h3>Loading products...</h3>
}
else
{
    <h2 class="mb-5"><b>@_product.Name</b></h2>

    var photos = _product!.Photos!.ToList();

    <div class="row mt-3">
        <DisplayProductInfo Photos="photos" Product="_product" RemovePhotoFunc="DeletePhoto"></DisplayProductInfo>
    </div>

    if (UserProfile.IsLoggedIn() && UserProfile.IsAdmin())
    {
        <div class="row mt-3">
            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-12">
                <a
                    @onclick="() => { _addPhotoForm.Open(); }" style="cursor:pointer;">
                    <div class="card">
                        <img class="img-thumbnail" src="/images/add_new_item.png" alt="AddNewItem"/>
                        <div class="card-body">
                            <h5 class="card-title mb-3">
                                Добавить новый товар
                            </h5>
                        </div>
                    </div>
                </a>
            </div>
        </div>
        <AddPhotoModal @ref="_addPhotoForm" Product="_product" AfterAddingCallBack="async () => { _product = await FetchService.GetProduct(ProductId); StateHasChanged(); }"></AddPhotoModal>
    }
}

@code {

    [Parameter]
    public Guid ProductId { get; set; }

    [Parameter]
    public Guid CategoryId { get; set; }

    private AddPhotoModal _addPhotoForm;
    private ProductDTO? _product;

    protected override async Task OnInitializedAsync()
    {
        _product = await FetchService.GetProduct(ProductId);
        var category = await FetchService.GetCategory(CategoryId);
        _product.CategoryName = category.Name;
    }

    private async Task DeletePhoto(Guid photoId)
    {
        try
        {
            await FetchService.DeletePhoto(photoId);
            _product = await FetchService.GetProduct(_product!.Id);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Ошибка при попытке удаления фотографии");
            throw;
        }
    }

}