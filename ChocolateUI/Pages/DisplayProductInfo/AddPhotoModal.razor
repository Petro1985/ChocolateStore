@using ChocolateUI.Services
@using Models.Product
@using Models.Category
@inject ILogger<AddPhotoModal> _Logger;
@inject IFetchService FetchService
@inject IJSRuntime JS

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog modal-dialog-centered .modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Добавление фотографий</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-control">
                    <InputFile id="images" OnChange="LoadFiles" multiple 
                               accept="image/jpeg, image/png" class="visually-hidden"/>
                    <label class="btn btn-primary col-12" for="images">Выбирите файлы изображений</label>
                </div>
                <div class="container">
                    @for(var i = 0; i < imageData.Count; i++)
                    {
                        var id = i;
                        <div class="row" style="position: relative">
                            <img src="data:image/png;base64,@imageData[id]"  alt="" class="col-12" style="padding: 0"/>
                            <button @onclick="() => DeletePhoto(id)" class="btn btn-close" style="position: absolute; right: 0px; top: 0px;z-index: 2; width: 30px;height: 30px;"></button>
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="AddPhotos">Добавить фотографии</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Отмена</button>
            </div>
        </div>
    </div>
</div>
<canvas id="canvas"></canvas>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public Func<Task> AfterAddingCallBack { get; set; }
    [Parameter]
    public ProductDto Product { get; set; }

    public Stream Photo = new MemoryStream();
    
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private IList<string> imageData = new List<string>();

    public CategoryDTO NewCategory { get; set; } = new ();
    private IJSObjectReference? module;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public async Task CreateCategory()
    {
        Close();
        await FetchService.CreateNewCategory(NewCategory);
        await AfterAddingCallBack.Invoke();
    }
    
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var format = "image/png";
            var files = e.GetMultipleFiles(100);
            
            foreach (var file in files)
            {
                await using var stream = file.OpenReadStream(file.Size);
                var croppedPhoto = await FetchService.CropPhoto(stream);
                imageData.Add(croppedPhoto);
            }

        }
        catch (Exception exception)
        {
            _Logger.LogError(exception, "Ошибка загрузки файла изображения");
            throw;
        }
    }

    private void DeletePhoto(int photoNumber)
    {
        imageData.RemoveAt(photoNumber);
    }

    private async Task AddPhotos()
    {
        Close();
        foreach (var image in imageData)
        {
            await FetchService.AddPhoto(image, Product.Id);
        }
        imageData = new List<string>();
        await AfterAddingCallBack();
    }
}